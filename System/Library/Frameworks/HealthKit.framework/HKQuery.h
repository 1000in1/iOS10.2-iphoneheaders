/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:54:56 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/Frameworks/HealthKit.framework/HealthKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/HKQueryClient.h>

@protocol OS_dispatch_queue, HKQueryDelegate, NSXPCProxyCreating;
@class NSPredicate, NSObject, NSMutableArray, HKObjectType, NSUUID, _HKFilter, HKSampleType, NSString;

@interface HKQuery : NSObject <HKQueryClient> {

	int _batchCount;
	NSPredicate* _predicate;
	NSObject*<OS_dispatch_queue> _activationQueue;
	id<HKQueryDelegate> _delegate;
	NSMutableArray* _sampleObjects;
	NSMutableArray* _deletedObjects;
	int _samplesDeliveredBeforeSuspend;
	/*^block*/id _activationHandler;
	BOOL _hasBeenExecuted;
	BOOL _receivedInitialResults;
	HKObjectType* _objectType;
	NSObject*<OS_dispatch_queue> _clientQueue;
	id<NSXPCProxyCreating> _serverProxy;
	NSUUID* _activationUUID;
	_HKFilter* _filter;
	double _collectionInterval;

}

@property (nonatomic,readonly) BOOL hasBeenExecuted;                                                                           //@synthesize hasBeenExecuted=_hasBeenExecuted - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> clientQueue;                                                         //@synthesize clientQueue=_clientQueue - In the implementation block
@property (nonatomic,retain) id<NSXPCProxyCreating> serverProxy;                                                               //@synthesize serverProxy=_serverProxy - In the implementation block
@property (nonatomic,readonly) NSUUID * activationUUID;                                                                        //@synthesize activationUUID=_activationUUID - In the implementation block
@property (nonatomic,__weak,readonly) id<HKQueryDelegate> delegate; 
@property (getter=_hasReceivedInitialResults,nonatomic,readonly) BOOL receivedInitialResults;                                  //@synthesize receivedInitialResults=_receivedInitialResults - In the implementation block
@property (getter=_filter,nonatomic,retain) _HKFilter * filter;                                                                //@synthesize filter=_filter - In the implementation block
@property (assign,setter=_setCollectionInterval:,getter=_collectionInterval,nonatomic) double collectionInterval;              //@synthesize collectionInterval=_collectionInterval - In the implementation block
@property (assign,setter=_setBatchCount:,nonatomic) int batchCount; 
@property (readonly) HKObjectType * objectType;                                                                                //@synthesize objectType=_objectType - In the implementation block
@property (readonly) HKSampleType * sampleType; 
@property (readonly) NSPredicate * predicate; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)FU_predicateForWorkoutsWithMetadataIndoor:(BOOL)arg1 ;
+(id)FU_predicateForWorkoutsWithMetadataSwimmingLocationType:(long long)arg1 ;
+(id)serverInterface;
+(id)clientInterface;
+(Class)_queryServerDataObjectClass;
+(id)_clientInterfaceProtocol;
+(void)_configureClientInterface:(id)arg1 ;
+(id)_serverInterfaceProtocol;
+(BOOL)shouldApplyPredicateForObjectType:(id)arg1 ;
+(id)predicateForObjectsWithMetadataKey:(id)arg1 ;
+(id)predicateForObjectsWithMetadataKey:(id)arg1 allowedValues:(id)arg2 ;
+(id)predicateForObjectsWithMetadataKey:(id)arg1 operatorType:(unsigned long long)arg2 value:(id)arg3 ;
+(id)predicateForObjectsFromSources:(id)arg1 ;
+(id)predicateForObjectsFromSourceRevisions:(id)arg1 ;
+(id)predicateForObjectsFromDevices:(id)arg1 ;
+(id)predicateForObjectsWithDeviceProperty:(id)arg1 allowedValues:(id)arg2 ;
+(id)_predicateForObjectsFromAppleWatches;
+(id)predicateForObjectWithUUID:(id)arg1 ;
+(id)predicateForObjectsWithUUIDs:(id)arg1 ;
+(id)predicateForObjectsWithNoCorrelation;
+(id)predicateForObjectsFromWorkout:(id)arg1 ;
+(id)predicateForQuantitySamplesWithOperatorType:(unsigned long long)arg1 quantity:(id)arg2 ;
+(id)predicateForCategorySamplesWithOperatorType:(unsigned long long)arg1 value:(long long)arg2 ;
+(id)predicateForWorkoutsWithWorkoutActivityType:(unsigned long long)arg1 ;
+(id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 duration:(double)arg2 ;
+(id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalEnergyBurned:(id)arg2 ;
+(id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalDistance:(id)arg2 ;
+(id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalSwimmingStrokeCount:(id)arg2 ;
+(id)predicateForActivitySummaryWithDateComponents:(id)arg1 ;
+(id)predicateForActivitySummariesBetweenStartDateComponents:(id)arg1 endDateComponents:(id)arg2 ;
+(id)predicateForActivityCachesBetweenStartDateComponents:(id)arg1 endDateComponents:(id)arg2 ;
+(id)predicateForSamplesWithStartDate:(id)arg1 endDate:(id)arg2 options:(unsigned long long)arg3 ;
+(id)predicateForObjectsFromSource:(id)arg1 ;
-(id)init;
-(id<HKQueryDelegate>)delegate;
-(void)deactivate;
-(void)setFilter:(_HKFilter *)arg1 ;
-(NSPredicate *)predicate;
-(id<NSXPCProxyCreating>)serverProxy;
-(void)activateWithClientQueue:(id)arg1 healthStore:(id)arg2 delegate:(id)arg3 withCompletion:(/*^block*/id)arg4 ;
-(void)reactivateWithServer:(id)arg1 ;
-(id)_initWithDataType:(id)arg1 predicate:(id)arg2 ;
-(void)_dispatchToClientForUUID:(id)arg1 block:(/*^block*/id)arg2 ;
-(void)_dispatchAsyncToResourceQueue:(/*^block*/id)arg1 ;
-(void)_queue_configureQueryServerDataObject:(id)arg1 ;
-(void)_queue_cleanupAfterDeactivation;
-(void)_queue_validate;
-(BOOL)_queue_shouldStayAliveAfterInitialResults;
-(/*^block*/id)_queue_errorHandler;
-(NSUUID *)activationUUID;
-(void)_client_receivedInitialResults;
-(void)deliverSampleObjects:(id)arg1 deletedObjects:(id)arg2 withAnchor:(id)arg3 forQuery:(id)arg4 ;
-(BOOL)_requiresValidSampleType;
-(id)_filter;
-(void)_throwInvalidArgumentExceptionIfHasBeenExecuted:(SEL)arg1 ;
-(void)_dispatchSyncToResourceQueue:(/*^block*/id)arg1 ;
-(id)_predicateFilterClasses;
-(void)_queue_deactivate;
-(void)_queue_deliverErrorAndDeactivate:(id)arg1 ;
-(void)_queue_activateWithServer:(id)arg1 isReactivation:(BOOL)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)_setCollectionInterval:(double)arg1 ;
-(void)setServerProxy:(id<NSXPCProxyCreating>)arg1 ;
-(void)_queue_requestServerProxyWithUUID:(id)arg1 server:(id)arg2 handler:(/*^block*/id)arg3 ;
-(void)deliverInitialStatisticsObjects:(id)arg1 anchor:(id)arg2 forQuery:(id)arg3 ;
-(void)deliverResetStatisticsObjects:(id)arg1 forQuery:(id)arg2 ;
-(int)_samplesDeliveredBeforeSuspend;
-(BOOL)_shouldStayAliveAfterInitialResults;
-(void)deliverValuesByType:(id)arg1 forQuery:(id)arg2 ;
-(void)deliverUpdatedValuesByType:(id)arg1 forQuery:(id)arg2 ;
-(void)deliverResetValuesByType:(id)arg1 forQuery:(id)arg2 ;
-(void)_setSamplesDeliveredBeforeSuspend:(int)arg1 ;
-(void)_setActivationHandler:(/*^block*/id)arg1 ;
-(/*^block*/id)_activationQueue_activationHandler;
-(void)_setBatchCount:(int)arg1 ;
-(BOOL)hasBeenExecuted;
-(BOOL)_hasReceivedInitialResults;
-(double)_collectionInterval;
-(HKSampleType *)sampleType;
-(void)deliverError:(id)arg1 forQuery:(id)arg2 ;
-(void)deliverStatistics:(id)arg1 forQuery:(id)arg2 ;
-(void)deliverSources:(id)arg1 forQuery:(id)arg2 ;
-(void)deliverUpdatedSources:(id)arg1 added:(id)arg2 forQuery:(id)arg3 ;
-(void)deliverActivityMoveStatistics:(id)arg1 exerciseStatistics:(id)arg2 standHoursInfo:(id)arg3 workouts:(id)arg4 forQuery:(id)arg5 ;
-(HKObjectType *)objectType;
-(void)deliverResultsResetWithAnchor:(id)arg1 final:(BOOL)arg2 forQuery:(id)arg3 ;
-(void)deliverSampleBatch:(id)arg1 deletedBatch:(id)arg2 final:(BOOL)arg3 anchor:(id)arg4 forQuery:(id)arg5 ;
-(void)deliverCurrentActivityCache:(id)arg1 moveStatistics:(id)arg2 exerciseStatistics:(id)arg3 standHoursInfo:(id)arg4 queryUUID:(id)arg5 ;
-(void)dataUpdatedInDatabaseWithAnchor:(id)arg1 query:(id)arg2 ;
-(int)batchCount;
-(void)resetStatisticsForQuery:(id)arg1 ;
-(void)deliverStatisticsBatch:(id)arg1 initialDelivery:(BOOL)arg2 finalBatch:(BOOL)arg3 anchor:(id)arg4 forQuery:(id)arg5 ;
-(void)deliverUpdatedStatistics:(id)arg1 anchor:(id)arg2 forQuery:(id)arg3 ;
-(void)setClientQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)clientQueue;
@end

