/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:56:44 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned numberDoubleValue : 1;
	unsigned numberIntValue : 1;
	unsigned timestamp : 1;
} SCD_Struct_HD1;

typedef struct HDSQLiteRow* HDSQLiteRowRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<sqlite3_stmt *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<sqlite3_stmt *> >;

typedef struct _compressed_pair<float, std::__1::equal_to<sqlite3_stmt *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<sqlite3_stmt *> >;

typedef struct _hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *> {
	__hash_node<sqlite3_stmt *, void *> __next_;
} hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *>, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> > > {
	hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *>, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<sqlite3_stmt *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > {
	__hash_node<sqlite3_stmt *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<sqlite3_stmt *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<sqlite3_stmt *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<sqlite3_stmt *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<sqlite3_stmt *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > >;

typedef struct _hash_table<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> > {
	unique_ptr<std::__1::__hash_node<sqlite3_stmt *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *>, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<sqlite3_stmt *> > __p2_;
	compressed_pair<float, std::__1::equal_to<sqlite3_stmt *> > __p3_;
} hash_table<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> >;

typedef struct unordered_set<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> > {
	hash_table<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> > __table_;
} unordered_set<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> >;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	unsigned duration : 1;
	unsigned goal : 1;
	unsigned goalType : 1;
	unsigned totalBasalEnergyBurnedInCanonicalUnit : 1;
	unsigned totalDistanceInCanonicalUnit : 1;
	unsigned totalEnergyBurnedInCanonicalUnit : 1;
	unsigned totalWStepsInCanonicalUnit : 1;
	unsigned type : 1;
} SCD_Struct_HD16;

typedef struct {
	unsigned activeEnergyBurnedAnchor : 1;
	unsigned activeHours : 1;
	unsigned activeHoursAnchor : 1;
	unsigned briskMinutes : 1;
	unsigned briskMinutesAnchor : 1;
	unsigned cacheIndex : 1;
	unsigned calorieGoalAnchor : 1;
	unsigned deepBreathingDuration : 1;
	unsigned deepBreathingSessionAnchor : 1;
	unsigned energyBurned : 1;
	unsigned energyBurnedGoal : 1;
	unsigned energyBurnedGoalAnchor : 1;
	unsigned energyBurnedGoalDate : 1;
	unsigned flightsClimbed : 1;
	unsigned flightsClimbedAnchor : 1;
	unsigned pushCount : 1;
	unsigned pushCountAnchor : 1;
	unsigned stepCount : 1;
	unsigned stepCountAnchor : 1;
	unsigned walkingAndRunningDistance : 1;
	unsigned walkingAndRunningDistanceAnchor : 1;
	unsigned wheelchairUse : 1;
	unsigned workoutAnchor : 1;
} SCD_Struct_HD17;

typedef struct {
	unsigned endDate : 1;
	unsigned startDate : 1;
} SCD_Struct_HD18;

typedef struct {
	unsigned confidence : 1;
	unsigned nextEntryTime : 1;
	unsigned modeOfTransportation : 1;
	unsigned sourceType : 1;
} SCD_Struct_HD19;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, double>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, double>, void *> > >;

typedef struct _tree<std::__1::__value_type<long long, double>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, double> > > {
	__tree_node<std::__1::__value_type<long long, double>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, double>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true> > __pair3_;
} tree<std::__1::__value_type<long long, double>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, double> > >;

typedef struct map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > {
	tree<std::__1::__value_type<long long, double>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, double>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, double> > > __tree_;
} map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >;

typedef struct {
	double field1;
	double field2;
	long long field3;
	long long field4;
	double field5;
} SCD_Struct_HD25;

typedef struct {
	unsigned duration : 1;
	unsigned goal : 1;
	unsigned goalType : 1;
	unsigned isIndoorWorkout : 1;
	unsigned isWatchWorkout : 1;
	unsigned totalBasalEnergyBurnedInCanonicalUnit : 1;
	unsigned totalDistanceInCanonicalUnit : 1;
	unsigned totalEnergyBurnedInCanonicalUnit : 1;
	unsigned type : 1;
} SCD_Struct_HD26;

typedef struct {
	double avg;
	double max;
	double min;
	unsigned long long count;
} SCD_Struct_HD27;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > >;

typedef struct _tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > > {
	__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDDiscreteStats>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true> > __pair3_;
} tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > >;

typedef struct map<long long, _HDDiscreteStats, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDDiscreteStats> > > {
	tree<std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDDiscreteStats>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDDiscreteStats> > > __tree_;
} map<long long, _HDDiscreteStats, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDDiscreteStats> > >;

typedef struct {
	unsigned code : 1;
} SCD_Struct_HD32;

typedef struct linear_congruential_engine<unsigned int, 48271, 0, 2147483647> {
	unsigned __x_;
} linear_congruential_engine<unsigned int, 48271, 0, 2147483647>;

typedef struct param_type {
	double __mean_;
	double __stddev_;
} param_type;

typedef struct normal_distribution<double> {
	param_type __p_;
	double _V_;
	BOOL _V_hot_;
} normal_distribution<double>;

typedef struct MGNotificationTokenStruct* MGNotificationTokenStructRef;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct __CFUserNotification* CFUserNotificationRef;

typedef struct shared_ptr<health::DataStore> {
	DataStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<health::DataStore>;

typedef struct {
	unsigned databaseSizeMB : 1;
	unsigned highFrequencyDataSizeMB : 1;
	unsigned lastMonthDatabaseSizeIncreaseMB : 1;
	unsigned lastMonthRowsAdded : 1;
	unsigned manuallyEnteredTypesCount : 1;
	unsigned percentageDeletedObjects : 1;
	unsigned rowCountObjects : 1;
	unsigned thirdPartyAppsCount : 1;
	unsigned thirdPartyAppsWroteDataCount : 1;
	unsigned timestamp : 1;
	unsigned rowCountCDA : 1;
	unsigned hasWatchSource : 1;
} SCD_Struct_HD40;

typedef struct {
	unsigned numberOfFriends : 1;
	unsigned numberOfFriendsAwaitingResponse : 1;
	unsigned numberOfFriendsHiddenFromMe : 1;
	unsigned numberOfFriendsMuted : 1;
	unsigned numberOfFriendsMyDataHidden : 1;
	unsigned numberOfFriendsPendingMyResponse : 1;
	unsigned timestamp : 1;
	unsigned maxFriendDuration : 1;
	unsigned medianFriendDuration : 1;
	unsigned minFriendDuration : 1;
} SCD_Struct_HD41;

typedef struct {
	unsigned daysSinceFirstCalorieGoal : 1;
	unsigned eventBusyTime : 1;
	unsigned numberOfEvents : 1;
	unsigned progressUpdateFrequency : 1;
	unsigned timeZoneOffset : 1;
	unsigned timestamp : 1;
	unsigned enableAchievements : 1;
	unsigned enableGoalCompletions : 1;
	unsigned enableStandReminders : 1;
	unsigned enableWeeklySummary : 1;
	unsigned wellnessComplicationOnWatchFace : 1;
} SCD_Struct_HD42;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __first_;
} compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > {
	HDActivityCacheStatisticsBuilderWorkoutSample __begin_;
	HDActivityCacheStatisticsBuilderWorkoutSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> >;

typedef struct _compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __first_;
} compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > {
	HDActivityCacheActiveSource __begin_;
	HDActivityCacheActiveSource __end_;
	compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > __end_cap_;
} vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD47;

typedef struct {
	unsigned dwelltimeMs : 1;
	unsigned endDate : 1;
	unsigned startDate : 1;
	unsigned dismissReason : 1;
	unsigned scrollBehavior : 1;
} SCD_Struct_HD48;

typedef struct {
	unsigned endAnchor : 1;
	unsigned sequence : 1;
	unsigned startAnchor : 1;
	unsigned objectType : 1;
	unsigned complete : 1;
	unsigned speculative : 1;
} SCD_Struct_HD49;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __first_;
} compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > {
	HDActivityCacheStatisticsBuilderSample __begin_;
	HDActivityCacheStatisticsBuilderSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >;

typedef struct _compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __first_;
} compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > {
	HDActivityCacheStatisticsBuilderStandHourSample __begin_;
	HDActivityCacheStatisticsBuilderStandHourSample __end_;
	compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > __end_cap_;
} vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > >;

typedef struct _tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > __pair3_;
} tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > {
	tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > __tree_;
} map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > >;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_HD58;

typedef struct {
	unsigned endDate : 1;
	unsigned startDate : 1;
	unsigned timestamp : 1;
	unsigned alertType : 1;
	unsigned testAction : 1;
	unsigned dndEnabled : 1;
	unsigned failedPosting : 1;
} SCD_Struct_HD59;

typedef struct {
	double field1;
	BOOL field2;
} SCD_Struct_HD60;

typedef struct {
	unsigned activeHours : 1;
	unsigned activeHoursGoal : 1;
	unsigned briskMinutes : 1;
	unsigned briskMinutesGoal : 1;
	unsigned date : 1;
	unsigned energyBurned : 1;
	unsigned energyBurnedGoal : 1;
	unsigned pushCount : 1;
	unsigned snapshotIndex : 1;
	unsigned stepCount : 1;
	unsigned timeZoneOffsetFromUTCForNoon : 1;
	unsigned uploadedDate : 1;
	unsigned walkingAndRunningDistance : 1;
	unsigned wheelchairUse : 1;
} SCD_Struct_HD61;

typedef struct __CFString* CFStringRef;

