/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:17 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorMapModel.h>
#import <libobjc.A.dylib/VKStyleManagerObserver.h>

@class VKRouteContext, NSString;

@interface VKPolygonMapModel : VKVectorMapModel <VKStyleManagerObserver> {

	shared_ptr<ggl::PolygonStroke::MeshPipelineState>* _strokePipelineState;
	shared_ptr<ggl::PolygonAnimatableStroke::MeshPipelineState>* _animatableStrokePipelineState;
	shared_ptr<ggl::PolygonFill::CompressedMeshPipelineState>* _fillPipelineState;
	shared_ptr<ggl::PolygonFill::CompressedMeshPipelineState>* _blendedFillPipelineState;
	shared_ptr<ggl::PolygonAnimatableFill::CompressedMeshPipelineState>* _animatableFillPipelineState;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup> > >* _strokePipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup> > >* _animatableStrokePipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup> > >* _fillPipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup> > >* _blendedFillPipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup> > >* _animatableFillPipelineSetupPool;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _polygonRenderStates[32];
	int _belowRoadsSourceTileZtoStencilOffset;
	int _aboveRoadsSourceTileZToStencilOffset;
	int _aboveBuildingsSourceTileZToStencilOffset;
	ClearItem* _belowRoadsClearItem;
	ClearItem* _aboveRoadsClearItem;
	ClearItem* _aboveBuildingsClearItem;
	shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant> >* _variantData;
	RenderItemBatcher* _batcher;
	VKRouteContext* _routeContext;
	unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes> > >* _transitNodesRouteAttributesMap;
	BOOL _buildingsAre3D;
	CommandBufferIdSet* _commandBufferIds;
	unsigned long long _mapLayerPosition;

}

@property (assign,nonatomic) unsigned long long mapLayerPosition;                                               //@synthesize mapLayerPosition=_mapLayerPosition - In the implementation block
@property (nonatomic,retain) VKRouteContext * routeContext;                                                     //@synthesize routeContext=_routeContext - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) shared_ptr<gss::StylesheetManager<gss::PropertyID> >* styleManager; 
-(void)dealloc;
-(void)reset;
-(void)didReceiveMemoryWarning:(BOOL)arg1 ;
-(void)stylesheetDidChange;
-(void)gglLayoutScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)buildingsDidBecome3D:(BOOL)arg1 ;
-(unsigned long long)mapLayerPosition;
-(void)reserveStencilRangeAboveBuildingsForScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)reserveStencilRangeAboveRoadsForScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)reserveStencilRangeBelowRoadsForScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(id)initWithTarget:(id)arg1 sharedResources:(id)arg2 commandBufferIdSet:(CommandBufferIdSet*)arg3 ;
-(void)setMapLayerPosition:(unsigned long long)arg1 ;
-(void)stylesheetDoneChanging;
-(void)stylesheetTransitionDidProgress;
-(void)stylesheetWillChange;
-(BOOL)wantsCategorizedSourceTiles;
-(shared_ptr<md::FeatureMarker>*)featureMarkerInTile:(id)arg1 atPoint:(Matrix<double, 3, 1>*)arg2 ;
-(void)willStartDrawingTiles:(id)arg1 ;
-(void)flushPools;
-(void)resetPools;
-(unsigned long long)textureSize;
-(void)generateRenderItemsForScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(Matrix<float, 4, 4>)worldTransformForPolygonGroup:(id)arg1 atZoom:(float)arg2 ;
-(RenderState*)renderStateForFilling:(BOOL)arg1 usingStencilType:(unsigned char)arg2 blendingEnabled:(BOOL)arg3 depthTestingEnabled:(BOOL)arg4 ;
-(void)generateRenderItemsForOpaquePolygonsInScene:(id)arg1 context:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)generateRenderItemsForTransparentPolygonsInScene:(id)arg1 context:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)updateStylesInTiles:(id)arg1 updateTextures:(BOOL)arg2 ;
-(CommandBuffer*)belowRoadsCommanderBuffer:(RenderQueue*)arg1 ;
-(CommandBuffer*)aboveRoadsCommanderBuffer:(RenderQueue*)arg1 ;
-(CommandBuffer*)aboveBuildingsCommanderBuffer:(RenderQueue*)arg1 ;
-(VKRouteContext *)routeContext;
-(void)setRouteContext:(VKRouteContext *)arg1 ;
@end

