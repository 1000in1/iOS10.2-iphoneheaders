/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:17 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKOverlayPainter.h>
#import <libobjc.A.dylib/VKPolylineObserver.h>

@class VKRouteLine, NSSet, VKTileKeyList, VKTimedAnimation, VKPolylineOverlay, NSString;

@interface VKPolylineOverlayPainter : VKOverlayPainter <VKPolylineObserver> {

	VKRouteLine* _routeLine;
	double _routeLineWidthScaleRegular;
	BOOL _selected;
	shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >* _viewUniforms;
	unique_ptr<md::SolidTrafficLayer, std::__1::default_delete<md::SolidTrafficLayer> >* _solidTrafficLayer;
	unique_ptr<md::PilledTrafficLayer, std::__1::default_delete<md::PilledTrafficLayer> >* _pilledTrafficLayer;
	unique_ptr<md::RouteLineArrowSharedResources, std::__1::default_delete<md::RouteLineArrowSharedResources> >* _arrowSharedResources;
	vector<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer> >, std::__1::allocator<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer> > > >* _arrowLayers;
	unique_ptr<md::RouteLineSharedResources, std::__1::default_delete<md::RouteLineSharedResources> >* _routeSharedResources;
	unique_ptr<md::RouteLineLayer, std::__1::default_delete<md::RouteLineLayer> >* _routeLineLayer;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _debugRenderState;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _debugRenderItems;
	unique_ptr<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup> > >* _debugPipelineSetups;
	unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > >* _debugUnmatchedRouteLineMeshes;
	double _previousViewUnitsPerPoint;
	int _styleZ;
	unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> >* _selectedSections;
	fast_shared_ptr<md::RouteLineSection>* _automobileSection;
	Matrix<double, 4, 4> _matrix;
	NSSet* _previousTilesInView;
	VKTileKeyList* _previousKeysInView;
	double _simplificationEpsilon;
	VKTimedAnimation* _fadeAnimation;
	float _alphaScale;
	VKTimedAnimation* _arrowFadeAnimation;
	float _arrowAlphaScale;
	BOOL _showArrows;
	VKTimedAnimation* _arrowCrossFadeAnimation;
	BOOL _showTraffic;
	BOOL _forceRoutelineUpdate;
	int _stencilValue;
	double _contentScale;
	unsigned long long _targetDisplayStep;
	float _crossfadingDisplayStep;
	BOOL _wasInRealisticMode;
	FeatureAttributeSet* _trafficAttributes;
	FeatureAttributeSet* _travelledTrafficAttributes;
	TrafficMeshStyle _builtMeshStyle;
	shared_ptr<gss::StylesheetQuery<gss::PropertyID> >* _carStyleQuery;

}

@property (nonatomic,readonly) VKPolylineOverlay * polyline; 
@property (assign,nonatomic) BOOL selected;                                   //@synthesize selected=_selected - In the implementation block
@property (nonatomic,readonly) VKPolylineOverlay * routeOverlay; 
@property (assign,nonatomic) BOOL showTraffic;                                //@synthesize showTraffic=_showTraffic - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(void)flush;
-(void)setSelected:(BOOL)arg1 ;
-(BOOL)selected;
-(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)styleManager;
-(void)stylesheetDidChange;
-(BOOL)_shouldShowTraffic;
-(void)setContainerModel:(id)arg1 ;
-(void)layoutWithContext:(LayoutContext*)arg1 tiles:(id)arg2 keysInView:(id)arg3 ;
-(void)gglLayoutWithContext:(LayoutContext*)arg1 overlayMaskCommandBuffer:(CommandBuffer*)arg2 traveledStrokeCommandBuffer:(CommandBuffer*)arg3 strokeCommandBuffer:(CommandBuffer*)arg4 traveledFillCommandBuffer:(CommandBuffer*)arg5 fillCommandBuffer:(CommandBuffer*)arg6 tiles:(id)arg7 ;
-(void)setNeedsLayoutForPolyline:(id)arg1 ;
-(void)polyline:(id)arg1 selectedSections:(id)arg2 deselectedSections:(id)arg3 ;
-(VKPolylineOverlay *)routeOverlay;
-(void)_userDefaultsDidChange:(id)arg1 ;
-(void)gglLayoutWithContext:(LayoutContext*)arg1 overlayMaskCommandBuffer:(CommandBuffer*)arg2 traveledStrokeCommandBuffer:(CommandBuffer*)arg3 strokeCommandBuffer:(CommandBuffer*)arg4 traveledFillCommandBuffer:(CommandBuffer*)arg5 fillCommandBuffer:(CommandBuffer*)arg6 tiles:(id)arg7 layer:(unsigned char)arg8 ;
-(void)prepareDebugLines;
-(void)layoutDebugUnmatchedRouteLine:(LayoutContext*)arg1 commandBuffer:(CommandBuffer*)arg2 ;
-(float)automobileRouteLineWidthForCamera:(id)arg1 canvasSize:(CGSize)arg2 ;
-(void)prepareToDrawWithCanvas:(id)arg1 ;
-(void)updateRouteLineStencilValue:(int)arg1 ;
-(BOOL)showTraffic;
-(void)setShowTraffic:(BOOL)arg1 ;
-(VKPolylineOverlay *)polyline;
-(id)initWithOverlay:(id)arg1 ;
@end

