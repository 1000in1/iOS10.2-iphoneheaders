/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:18 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorTile.h>

@class VKAnimation;

@interface VKGGLTransitTile : VKVectorTile {

	vector<md::TransitLine, std::__1::allocator<md::TransitLine> >* _lines;
	vector<md::TransitLink, std::__1::allocator<md::TransitLink> >* _links;
	list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection> >* _displayConnections;
	unique_ptr<md::TransitJunctionManager, std::__1::default_delete<md::TransitJunctionManager> >* _junctionManager;
	vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >* _nodes;
	vector<std::__1::shared_ptr<md::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode> > >* _nodesWithConnectivity;
	vector<std::__1::shared_ptr<md::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode> > >* _connectedNodes;
	vector<std::__1::shared_ptr<md::TransitParentNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode> > >* _parentNodes;
	vector<std::__1::shared_ptr<md::TransitOrphanNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode> > >* _orphanNodes;
	unique_ptr<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::TransitRibbonDescriptor> > >* _lineLayer;
	map<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor> *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor> *> > >* _lineBatches;
	unique_ptr<ggl::TransitLineRibbon::BasePipelineSetup, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup> >* _lineStrokePipelineSetup;
	unique_ptr<ggl::TransitLineRibbon::BasePipelineSetup, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup> >* _lineFillPipelineSetup;
	unique_ptr<md::StyleTexture<md::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel> > >* _lineFillStyleTexture;
	unique_ptr<md::StyleTexture<md::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel> > >* _lineStrokeStyleTexture;
	unique_ptr<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::RoadRibbonDescriptor> > >* _displayConnectionLayer;
	LabelExternalObjectsModerator* _labelExternalObjectsModerator;
	shared_ptr<md::DataOverrideManager>* _dataOverrideManager;
	TransitNodeFeaturePool* _nodeFeaturePool;
	shared_ptr<md::TransitInterTileMediator>* _interTileMediator;
	BOOL _areNormalsSynchedForTileEdge[4];
	BOOL _isNeighboringTilePresent[4];
	unordered_map<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > > > >* _lineIDToAssociatedNodesMap;
	double _worldUnitsPerMeter;
	float _lineInflation;
	float _displayConnectionInflation;
	float _alphaScale;
	unsigned _easingPointCount;
	BOOL _didLineDataChange;
	BOOL _didNeighboringTilesChange;
	BOOL _shouldUpdateMergedLinesForNodes;
	VKAnimation* _animation;

}

@property (nonatomic,retain) VKAnimation * animation;                                                       //@synthesize animation=_animation - In the implementation block
@property (nonatomic,readonly) BasePipelineSetup* lineStrokePipelineSetup; 
@property (nonatomic,readonly) BasePipelineSetup* lineFillPipelineSetup; 
@property (nonatomic,readonly) vector<std::__1::shared_ptr<md::TransitNode>* nodes;                         //@synthesize nodes=_nodes - In the implementation block
@property (nonatomic,readonly) vector<md::TransitLink* links;                                               //@synthesize links=_links - In the implementation block
@property (nonatomic,readonly) list<md::TransitDisplayConnection* displayConnections;                       //@synthesize displayConnections=_displayConnections - In the implementation block
@property (nonatomic,readonly) RibbonLayer<ggl::TransitRibbonDescriptor>* lineLayer; 
@property (nonatomic,readonly) RibbonLayer<ggl::RoadRibbonDescriptor>* displayConnectionLayer; 
-(void)dealloc;
-(VKAnimation *)animation;
-(void)setAnimation:(VKAnimation *)arg1 ;
-(const vector<md::TransitLine, std::__1::allocator<md::TransitLine> >*)lines;
-(vector<std::__1::shared_ptr<md::TransitNode>*)nodes;
-(void)populateSelectedLineBounds:(id)arg1 ;
-(void)setSelectedLines:(const unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg1 ;
-(void)addTransitLinesAtGroundPoint:(const Matrix<double, 3, 1>*)arg1 toArray:(vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float> > >*)arg2 ;
-(void)addTransitLinesInRect:(const Box<double, 2>*)arg1 toSet:(unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink> >*)arg2 ;
-(BasePipelineSetup*)lineStrokePipelineSetup;
-(BasePipelineSetup*)lineFillPipelineSetup;
-(RibbonLayer<ggl::RoadRibbonDescriptor>*)displayConnectionLayer;
-(RibbonLayer<ggl::TransitRibbonDescriptor>*)lineLayer;
-(void)updateNodeStylesInContext:(LayoutContext*)arg1 ;
-(void)updateDisplayConnectionStylesInContext:(LayoutContext*)arg1 ;
-(void)updateLineStylesInContext:(LayoutContext*)arg1 lineMergingDisabled:(unsigned char)arg2 forceMeshCreation:(BOOL)arg3 ;
-(BOOL)updateLinesAtZoom:(float)arg1 ;
-(void)setSelectedNodes:(const unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg1 ;
-(void)appendNodesAttachedToLines:(const unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg1 toNodes:(unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg2 ;
-(float)minLineZoomForIDs:(const unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg1 ;
-(void)setAlphaScale:(float)arg1 ;
-(void)willDisappear;
-(void)willAppear;
-(void)setInterTileMediator:(const shared_ptr<md::TransitInterTileMediator>*)arg1 ;
-(void)createGroupsWithDevice:(Device*)arg1 sharedResources:(const TransitLineSharedResources*)arg2 ;
-(id)initWithKey:(const VKTileKey*)arg1 modelTile:(id)arg2 styleManager:(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)arg3 dataOverrideManager:(shared_ptr<md::DataOverrideManager>*)arg4 sharedResources:(id)arg5 contentScale:(double)arg6 device:(Device*)arg7 labelExternalObjectsModerator:(LabelExternalObjectsModerator*)arg8 ;
-(void)neighborTileDidChange;
-(void)setNodeFeaturePool:(TransitNodeFeaturePool*)arg1 ;
-(BOOL)containsLinesInSet:(const unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >*)arg1 ;
-(void)_prepareLinesWithSharedResources:(const TransitLineSharedResources*)arg1 ;
-(void)_createLinesWithLoader:(Loader*)arg1 ;
-(void)_createDisplayConnectionsWithLoader:(Loader*)arg1 sharedResources:(const TransitLineSharedResources*)arg2 ;
-(void)_createNodes;
-(float)_tilePerPoint:(LayoutContext*)arg1 ;
-(shared_ptr<md::TransitItemMarker>*)closestItemAtPixel:(Matrix<float, 2, 1>)arg1 maxDistance:(float)arg2 itemDistanceSqrd:(float*)arg3 screenProjectionMatrix:(const Matrix<double, 4, 4>*)arg4 ;
-(id)debugString;
-(void)debugDrawWithConsole:(DebugConsole*)arg1 context:(HighlightHelper*)arg2 ;
-(list<md::TransitDisplayConnection*)displayConnections;
-(vector<md::TransitLink*)links;
@end

