/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:17 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorMapModel.h>

@interface VKCoastlineMapModel : VKVectorMapModel {

	unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup> > >* _glowAlphaPipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup> > >* _glowPipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup> > >* _coastlineStencilPipelineSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup> > >* _coastlinePipelineSetupPool;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineStencilRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _stencilInvertRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _stencilWaterEraseRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineRenderStateNoStencil;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowAlphaRenderStateFront;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowRenderStateFront;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowAlphaRenderStateBack;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowRenderStateBack;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _coastlineStencilRenderItemPool;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _coastlineRenderItemPool;
	unique_ptr<ggl::PolygonFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonFill::MeshPipelineSetup> >* _stencilInvertPipelineSetup;
	shared_ptr<ggl::GlowAlpha::MeshPipelineState>* _glowAlphaPipelineState;
	shared_ptr<ggl::Glow::MeshPipelineState>* _glowPipelineState;
	shared_ptr<ggl::PolygonFill::MeshPipelineState>* _stencilFillPipelineState;
	shared_ptr<ggl::PolygonFill::CompressedMeshPipelineState>* _stencilFillCompressedPipelineState;
	shared_ptr<ggl::PolygonShadowedStroke::ShadowPathPipelineState>* _polygonShadowedStrokePipelineState;
	unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >* _stencilInvertRenderItem;
	unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >* _stencilEraseWaterRenderItem;
	vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup> >, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > >, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup> >, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > > > >* _coastlineStencilItems;
	ClearItem* _clearItem;
	int _coastlineSourceTileZtoStencilOffset;

}
-(void)didReceiveMemoryWarning:(BOOL)arg1 ;
-(void)stylesheetDidChange;
-(id)initWithTarget:(id)arg1 sharedResources:(id)arg2 ;
-(void)gglLayoutScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(unsigned long long)mapLayerPosition;
-(void)reserveStencilRangeForScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)flushPools;
-(void)resetPools;
-(const FeatureAttributeSet*)waterFeatureAttributes;
-(void)generateCoastlineRenderItemsWithContext:(LayoutContext*)arg1 commandBuffer:(CommandBuffer*)arg2 ;
@end

