/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:18 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorTile.h>

@class VKTrafficTile;

@interface VKRoadTile : VKVectorTile {

	VKTrafficTile* _trafficTile;
	unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer> >* _roadLayer;
	unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer> >* _roadTrafficLayer;
	unique_ptr<md::PatternedLayer, std::__1::default_delete<md::PatternedLayer> >* _patternedRibbonLayer;

}

@property (nonatomic,retain) VKTrafficTile * trafficTile;                         //@synthesize trafficTile=_trafficTile - In the implementation block
@property (nonatomic,readonly) RoadLayer* roadLayer; 
@property (nonatomic,readonly) RoadLayer* roadTrafficLayer; 
@property (nonatomic,readonly) PatternedLayer* patternedRibbonLayer; 
-(void)dealloc;
-(void)updateViewDependentStateIfNecessaryWithContext:(LayoutContextRef)arg1 ;
-(id)initWithKey:(const VKTileKey*)arg1 modelTile:(id)arg2 styleManager:(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)arg3 sharedResources:(id)arg4 contentScale:(double)arg5 device:(Device*)arg6 ;
-(VKTrafficTile *)trafficTile;
-(PatternedLayer*)patternedRibbonLayer;
-(RoadLayer*)roadLayer;
-(RoadLayer*)roadTrafficLayer;
-(void)setTrafficTile:(VKTrafficTile *)arg1 ;
-(void)addRoadRibbonTo:(unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > >, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > > > >*)arg1 styleQuery:(shared_ptr<gss::StylesheetQuery<gss::PropertyID> >*)arg2 painterZ:(unsigned)arg3 numPoints:(unsigned long long)arg4 points:(Matrix<float, 2, 1>*)arg5 startCap:(BOOL)arg6 endCap:(BOOL)arg7 trafficTexelRun:(const TexelRun*)arg8 trafficSkeleton:(BOOL)arg9 ;
-(void)addPatternedRibbonTo:(unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > >, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > > > >*)arg1 styleQuery:(shared_ptr<gss::StylesheetQuery<gss::PropertyID> >*)arg2 painterZ:(unsigned)arg3 numPoints:(unsigned long long)arg4 points:(Matrix<float, 2, 1>*)arg5 ;
-(void)buildGglMeshesWithDevice:(Device*)arg1 trafficStream:(const TrafficStream*)arg2 ;
@end

