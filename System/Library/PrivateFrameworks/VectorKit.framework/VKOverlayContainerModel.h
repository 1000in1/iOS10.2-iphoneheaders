/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:17 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKMapTileModel.h>
#import <libobjc.A.dylib/VKRouteMatchedAnnotationPresentationObserver.h>
#import <libobjc.A.dylib/VKRouteContextObserver.h>
#import <libobjc.A.dylib/VKMapLayer.h>
#import <libobjc.A.dylib/VKStyleManagerObserver.h>

@protocol VKOverlayContainerDelegate, VKRouteMatchedAnnotationPresentation;
@class NSMutableSet, NSMutableArray, NSMapTable, VKSkyModel, VKRouteContext, NSSet, NSString;

@interface VKOverlayContainerModel : VKMapTileModel <VKRouteMatchedAnnotationPresentationObserver, VKRouteContextObserver, VKMapLayer, VKStyleManagerObserver> {

	NSMutableSet* _visibleOverlays;
	NSMutableArray* _overlayPainters;
	NSMapTable* _overlaysToPainters;
	NSMutableSet* _overlaysToAdd;
	NSMutableSet* _overlaysToRemove;
	NSMutableSet* _paintersToRemove;
	id<VKOverlayContainerDelegate> _delegate;
	BOOL _shouldCheckForOcclusion;
	BOOL _shouldOccludeTraffic;
	BOOL _shouldShowTraffic;
	BOOL _isShowingOuterHaloOnLabels;
	NSMapTable* _persistentOverlaysToPainters;
	NSMutableSet* _persistentOverlays;
	id<VKRouteMatchedAnnotationPresentation> _routeLineSplitAnnotation;
	VKSkyModel* _skyModel;
	ClearItem* _clearItem;
	unsigned char _applicationState;
	VKRouteContext* _routeContext;
	shared_ptr<gss::StylesheetManager<gss::PropertyID> >* _styleManager;
	unique_ptr<md::RouteLineSharedResources, std::__1::default_delete<md::RouteLineSharedResources> >* _routeSharedResources;
	unique_ptr<md::RouteLineArrowSharedResources, std::__1::default_delete<md::RouteLineArrowSharedResources> >* _arrowSharedResources;

}

@property (assign,nonatomic) BOOL shouldCheckForOcclusion;                                                    //@synthesize shouldCheckForOcclusion=_shouldCheckForOcclusion - In the implementation block
@property (assign,nonatomic) id<VKOverlayContainerDelegate> delegate;                                         //@synthesize delegate=_delegate - In the implementation block
@property (getter=isInRealisticMode,nonatomic,readonly) BOOL inRealisticMode; 
@property (getter=isInTransitMode,nonatomic,readonly) BOOL inTransitMode; 
@property (assign,nonatomic) BOOL shouldShowTraffic;                                                          //@synthesize shouldShowTraffic=_shouldShowTraffic - In the implementation block
@property (assign,nonatomic) BOOL shouldOccludeTraffic;                                                       //@synthesize shouldOccludeTraffic=_shouldOccludeTraffic - In the implementation block
@property (nonatomic,readonly) BOOL isShowingOuterHaloOnLabels;                                               //@synthesize isShowingOuterHaloOnLabels=_isShowingOuterHaloOnLabels - In the implementation block
@property (nonatomic,retain) id<VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;               //@synthesize routeLineSplitAnnotation=_routeLineSplitAnnotation - In the implementation block
@property (nonatomic,readonly) NSSet * persistentOverlays;                                                    //@synthesize persistentOverlays=_persistentOverlays - In the implementation block
@property (nonatomic,retain) VKSkyModel * skyModel;                                                           //@synthesize skyModel=_skyModel - In the implementation block
@property (nonatomic,retain) VKRouteContext * routeContext;                                                   //@synthesize routeContext=_routeContext - In the implementation block
@property (assign,nonatomic) shared_ptr<gss::StylesheetManager<gss::PropertyID> >* styleManager; 
@property (nonatomic,readonly) const RouteLineSharedResources* routeSharedResources; 
@property (nonatomic,readonly) const RouteLineArrowSharedResources* arrowSharedResources; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)reloadOnStylesheetChange;
-(void)setDelegate:(id<VKOverlayContainerDelegate>)arg1 ;
-(void)dealloc;
-(id<VKOverlayContainerDelegate>)delegate;
-(void)reset;
-(void)didReceiveMemoryWarning:(BOOL)arg1 ;
-(void)setStyleManager:(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)arg1 ;
-(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)styleManager;
-(id<VKRouteMatchedAnnotationPresentation>)routeLineSplitAnnotation;
-(NSSet *)persistentOverlays;
-(void)stylesheetDidChange;
-(void)layoutScene:(id)arg1 withContext:(LayoutContext*)arg2 ;
-(BOOL)shouldLayoutWithoutStyleManager;
-(id)initWithTarget:(id)arg1 sharedResources:(id)arg2 ;
-(void)gglLayoutScene:(id)arg1 withContext:(LayoutContext*)arg2 renderQueue:(RenderQueue*)arg3 ;
-(unsigned long long)mapLayerPosition;
-(void)setShouldCheckForOcclusion:(BOOL)arg1 ;
-(void)setSkyModel:(VKSkyModel *)arg1 ;
-(void)setShouldOccludeTraffic:(BOOL)arg1 ;
-(void)setShouldShowTraffic:(BOOL)arg1 ;
-(VKSkyModel *)skyModel;
-(VKRouteContext *)routeContext;
-(void)routeContextStateDidChange:(id)arg1 ;
-(const RouteLineSharedResources*)routeSharedResources;
-(const RouteLineArrowSharedResources*)arrowSharedResources;
-(BOOL)isInRealisticMode;
-(BOOL)isInTransitMode;
-(void)_updatePainterOrdering;
-(void)addPainterToRemove:(id)arg1 ;
-(BOOL)shouldCheckForOcclusion;
-(BOOL)shouldShowTraffic;
-(BOOL)shouldOccludeTraffic;
-(BOOL)isShowingOuterHaloOnLabels;
-(void)removePersistentOverlay:(id)arg1 ;
-(void)addPersistentOverlay:(id)arg1 ;
-(void)setApplicationState:(unsigned char)arg1 ;
-(void)setRouteLineSplitAnnotation:(id<VKRouteMatchedAnnotationPresentation>)arg1 ;
-(void)setRouteContext:(VKRouteContext *)arg1 ;
-(void)annotationPresentationDidChangePresentationCoordinate:(id)arg1 ;
@end

