/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:58:16 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKTile.h>

@class NSData;

@interface VKRasterTile : VKTile {

	NSData* _data;
	shared_ptr<gss::StylesheetManager<gss::PropertyID> >* _styleManager;
	int _genericTileType;
	BOOL _hasGenericTileType;
	shared_ptr<ggl::Texture2D>* _gglTexture;
	RenderItem* _renderItem;
	unique_ptr<ggl::Textured::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup> >* _pipelineSetup;
	unique_ptr<ggl::Clut::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup> >* _pipelineSetupCLUT;
	unique_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup> >* _shaderReverseAlphaSetup;

}

@property (nonatomic,readonly) BOOL hasGenericTileType;                           //@synthesize hasGenericTileType=_hasGenericTileType - In the implementation block
@property (nonatomic,readonly) int genericTileType;                               //@synthesize genericTileType=_genericTileType - In the implementation block
@property (nonatomic,readonly) RenderItem* renderItem; 
@property (assign,nonatomic) shared_ptr<ggl::Texture2D>* gglTexture;              //@synthesize gglTexture=_gglTexture - In the implementation block
-(void)dealloc;
-(void)setupNormalShaderWithRenderState:(RenderState*)arg1 pipelineState:(const shared_ptr<ggl::Textured::Pos2DUVPipelineState>*)arg2 mesh:(Mesh*)arg3 ;
-(void)setupReverseAlphaShaderWithRenderState:(RenderState*)arg1 pipelineState:(const shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState>*)arg2 mesh:(Mesh*)arg3 roadAlpha:(float)arg4 ;
-(RenderItem*)renderItem;
-(void)setupClutShaderWithRenderState:(RenderState*)arg1 pipelineState:(const shared_ptr<ggl::Clut::Pos2DUVPipelineState>*)arg2 mesh:(Mesh*)arg3 clutTexture:(Texture2D*)arg4 clutBlend:(float)arg5 ;
-(shared_ptr<ggl::Texture2D>*)gglTexture;
-(int)genericTileType;
-(BOOL)hasGenericTileType;
-(id)initWithKey:(const VKTileKey*)arg1 imageData:(id)arg2 styleManager:(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)arg3 ;
-(id)initWithKey:(const VKTileKey*)arg1 imageData:(id)arg2 styleManager:(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)arg3 genericTileType:(int)arg4 ;
-(CGImageRef)newCGImageFromData:(id)arg1 ;
-(shared_ptr<ggl::TextureData2D>*)buildTextureDataFromCGImage:(CGImageRef)arg1 ;
-(void)gglBuildTexture:(Device*)arg1 ;
-(void)immediateLoad:(Device*)arg1 ;
-(void)setGglTexture:(shared_ptr<ggl::Texture2D>*)arg1 ;
@end

