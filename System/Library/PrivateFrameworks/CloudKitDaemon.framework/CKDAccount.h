/*
* This header is generated by classdump-dyld 1.0
* on Friday, January 27, 2017 at 2:56:11 PM Japan Standard Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/CKDAccountInfoProvider.h>

@protocol OS_dispatch_queue;
@class ACAccountType, CKDBackingAccount, CKDClientContext, NSObject, NSString, NSPersonNameComponents, ACAccountStore;

@interface CKDAccount : NSObject <CKDAccountInfoProvider> {

	BOOL _isUnitTestingAccount;
	BOOL _accountWantsPushRegistration;
	BOOL _isAnonymousAccount;
	BOOL _haveWarnedAboutServerPreferredPushEnvironment;
	ACAccountType* _acAccountType;
	CKDBackingAccount* _backingAccount;
	CKDClientContext* _context;
	NSObject*<OS_dispatch_queue> _authTokenCallbackQueue;
	NSString* _lastFailedCloudKitAuthToken;

}

@property (nonatomic,retain) ACAccountType * acAccountType;                                    //@synthesize acAccountType=_acAccountType - In the implementation block
@property (nonatomic,readonly) NSString * accountID; 
@property (nonatomic,readonly) CKDBackingAccount * backingAccount;                             //@synthesize backingAccount=_backingAccount - In the implementation block
@property (assign,nonatomic,__weak) CKDClientContext * context;                                //@synthesize context=_context - In the implementation block
@property (assign,nonatomic) BOOL isAnonymousAccount;                                          //@synthesize isAnonymousAccount=_isAnonymousAccount - In the implementation block
@property (assign,nonatomic) BOOL haveWarnedAboutServerPreferredPushEnvironment;               //@synthesize haveWarnedAboutServerPreferredPushEnvironment=_haveWarnedAboutServerPreferredPushEnvironment - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> authTokenQueue; 
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> authTokenCallbackQueue;              //@synthesize authTokenCallbackQueue=_authTokenCallbackQueue - In the implementation block
@property (nonatomic,copy) NSString * lastFailedCloudKitAuthToken;                             //@synthesize lastFailedCloudKitAuthToken=_lastFailedCloudKitAuthToken - In the implementation block
@property (nonatomic,readonly) NSString * accountIdentifier; 
@property (nonatomic,readonly) NSPersonNameComponents * fullName; 
@property (nonatomic,readonly) NSString * primaryEmail; 
@property (nonatomic,readonly) NSString * username; 
@property (nonatomic,readonly) BOOL isFakeAccount; 
@property (assign,nonatomic) BOOL isUnitTestingAccount;                                        //@synthesize isUnitTestingAccount=_isUnitTestingAccount - In the implementation block
@property (assign,nonatomic) BOOL accountWantsPushRegistration;                                //@synthesize accountWantsPushRegistration=_accountWantsPushRegistration - In the implementation block
@property (nonatomic,readonly) BOOL iCloudDriveAllowsCellularAccess; 
@property (nonatomic,readonly) BOOL canAuthWithCloudKit; 
@property (nonatomic,readonly) BOOL cloudKitIsEnabled; 
@property (nonatomic,readonly) BOOL cloudPhotosIsEnabled; 
@property (nonatomic,readonly) ACAccountStore * accountStore; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) BOOL canAccessAccount; 
+(id)globalAuthTokenQueue;
-(NSString *)description;
-(CKDClientContext *)context;
-(id)config;
-(id)_initWithContext:(id)arg1 ;
-(void)setContext:(CKDClientContext *)arg1 ;
-(id)languageCode;
-(id)containerID;
-(ACAccountStore *)accountStore;
-(id)bundleID;
-(NSString *)username;
-(NSString *)accountIdentifier;
-(id)dsid;
-(BOOL)isAnonymousAccount;
-(void)fetchContainerScopedUserIDUsingBackgroundSession:(BOOL)arg1 allowsCellularAccess:(BOOL)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(BOOL)isUnitTestingAccount;
-(BOOL)canAuthWithCloudKit;
-(id)serverPreferredPushEnvironment;
-(NSString *)primaryEmail;
-(BOOL)isDataclassEnabled:(id)arg1 ;
-(id)initAnonymousAccountWithContext:(id)arg1 ;
-(id)initFakeAccountWithEmail:(id)arg1 password:(id)arg2 context:(id)arg3 ;
-(id)initPrimaryAccountWithContext:(id)arg1 ;
-(void)setIsUnitTestingAccount:(BOOL)arg1 ;
-(BOOL)accountWantsPushRegistration;
-(void)setAccountWantsPushRegistration:(BOOL)arg1 ;
-(BOOL)cloudPhotosIsEnabled;
-(BOOL)cloudKitIsEnabled;
-(BOOL)iCloudDriveAllowsCellularAccess;
-(BOOL)isFakeAccount;
-(BOOL)canAccessAccount;
-(id)containerScopedUserID;
-(id)mescalSession;
-(id)hardwareID;
-(void)renewAuthTokenWithReason:(id)arg1 failedToken:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)fetchConfigurationUsingBackgroundSession:(BOOL)arg1 allowsCellularAccess:(BOOL)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)resetMescalSession;
-(void)renewMescalSessionForRequest:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(id)baseURLForServerType:(long long)arg1 partitionType:(long long)arg2 ;
-(void)fetchPublicURLUsingBackgroundSession:(BOOL)arg1 allowsCellularAccess:(BOOL)arg2 serverType:(long long)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)fetchPrivateURLWithServerType:(long long)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)fetchDeviceIDUsingBackgroundSession:(BOOL)arg1 allowsCellularAccess:(BOOL)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)cloudKitAuthTokenWithCompletionHandler:(/*^block*/id)arg1 ;
-(BOOL)shouldFailAllTasks;
-(void)noteTimeSpentInNetworking:(double)arg1 ;
-(void)noteSuccessfulRequestWithNumDownloadedElements:(long long)arg1 ;
-(void)validateVettingToken:(id)arg1 vettingEmail:(id)arg2 vettingPhone:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)iCloudAuthTokenWithCompletionHandler:(/*^block*/id)arg1 ;
-(NSString *)accountID;
-(CKDBackingAccount *)backingAccount;
-(BOOL)haveWarnedAboutServerPreferredPushEnvironment;
-(void)setHaveWarnedAboutServerPreferredPushEnvironment:(BOOL)arg1 ;
-(id)_urlBySettingCustomBaseURL:(id)arg1 onURL:(id)arg2 ;
-(NSObject*<OS_dispatch_queue>)authTokenQueue;
-(void)setLastFailedCloudKitAuthToken:(NSString *)arg1 ;
-(id)_lockedCloudKitAuthTokenWithError:(id*)arg1 ;
-(NSObject*<OS_dispatch_queue>)authTokenCallbackQueue;
-(void)_lockedRenewAuthTokenWithReason:(id)arg1 failedToken:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)_lockediCloudAuthTokenWithError:(id*)arg1 ;
-(NSString *)lastFailedCloudKitAuthToken;
-(void)displayAuthenticationPromptWithReason:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)trafficContainerIdentifier;
-(void)noteFailedNetworkRequest;
-(void)noteFailedProtocolRequest;
-(id)initWithAccountID:(id)arg1 context:(id)arg2 ;
-(ACAccountType *)acAccountType;
-(void)setAcAccountType:(ACAccountType *)arg1 ;
-(void)setIsAnonymousAccount:(BOOL)arg1 ;
-(void)setAuthTokenCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(id)deviceName;
-(NSPersonNameComponents *)fullName;
-(id)regionCode;
-(id)enabledKeyboards;
-(id)applicationBundle;
@end

